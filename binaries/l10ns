#!/usr/bin/env node

/**
 * Module dependencies
 */

var commands = require('commander')
  , findup = require('findup-sync')
  , path = require('path')
  , open = require('open')
  , pjson = require('../package.json')
  , _ = require('underscore')
  , glob = require('glob')
  , program = require('../configurations/program')
  , text = require('../configurations/text')
  , log = require('../libraries/_log')
  , fs = require('fs')
  , utilities = require('../libraries/utilities');

/**
 * Project paths
 */

var l10nsPath = findup('l10ns.json')
  , projectConfigurations
  , _projectConfigurations
  , root
  , cf;

if(typeof process.argv[2] === 'undefined') {
  process.argv[2] = '--help';
}

var processRequest = (process.argv.length >= 2 && process.argv[2] !== 'init' && process.argv[2] !== '--help' &&  process.argv[2] !== '-h');

if(processRequest && !l10nsPath) {
  console.log('You are not inside a l10ns project. Please create one with `gt init`.');
  return;
}

if(l10nsPath) {
  root = path.dirname(l10nsPath);
  project = require(l10nsPath);
}
else {
  root = process.cwd();
  project = {};
}


/**
 * Add terminal colors
 */

require('terminal-colors');

/**
 * Set default configs
 */

var defaults = {
  getLocalizationStringFunctionName: program.GET_LOCALIZATION_STRING_FUNCTION_NAME,
  port: program.DEFAULT_PORT,
  autoOpen: program.DEFAULT_AUTO_OPEN,
  root: root,
  cache: {
    folder: root + '/.l10ns',
    search: root + '/.l10ns/search.json'
  }
};
// Merge with programm configs
defaults = _.extend(defaults, program);
project = _.defaults(project, defaults);

/**
 * Set short-cuts configs
 */

if(typeof project.store === 'undefined') {
  project.store = path.join(project.folder, program.DEFAULT_STORAGE_FOLDER);
}
else {
  project.store = path.join(project.root, project.store);
  if(!/^\//.test(project.store)) {
    project.store = path.join(project.root, project.store);
  }
}

language = require('../plugins/' + project.programmingLanguage + '/configurations');
if(typeof language.quiet === 'undefined') {
  language.quiet = program.DEFAULT_QUIET;
}

if(!fs.existsSync(project.cache.folder)) {
  fs.mkdirSync(project.cache.folder);
}

/**
 * Get all source files.
 */

var source = [], _files, adds, removes;

/**
 * Check if source is defined
 */

if(processRequest) {
  if(!project.source) {
    console.log('You must define your source files using a glob pattern in your l10ns.json file.')
    return;
  }

  for(var i = 0; i < project.source.length; i++) {
    if(project.source[i].substr(0, 1) !== '!') {
      adds = glob.sync(project.source[i], { cwd: root });
      source = source.concat(adds);
    } else {
      removes = glob.sync(project.source[i], { cwd: root });
      source = source.filter(function(file) {
        return removes.indexOf(file) === -1;
      });
    }
  }
  if(!source.length) {
    console.log('No files found. \n(Have you updated your l10ns.json to include your source file and ran `gt update` yet?)');
    return;
  }
  project.source = source;
}


/**
 * Global configurations
 */

global.project = project;
global.language = language;
global.program = program;
global.text = text;

/**
 * Set from binary to true. To indicate that the binary have been run
 */

global.fromBinary = true;

var cli = require('../libraries');

commands
  .version(pjson.version)
  .option('-l, --locale <locale>', 'specify locale', String, project.defaultLocale)
  .option('-p, --port <port>', 'specify port for interface', Number, project.interface.port)
  .option('-o, --open', 'open interface in browser')
  .option('--empty-values', 'show only non translated keys', Boolean, false)

commands
  .command('init')
  .description('Initialize a new GetTranslation project')
  .action(function() {
    cli.init();
  });

commands
  .command('interface')
  .description('Starts the translation interface')
  .action(function() {
    if(!utilities.initiatedProject()) {
      return console.log('You haven\'t initialized a project yet');
    }
    require('../interface/start');
  });

commands
  .command('search [q]')
  .description('Search translation keys and values')
  .action(function(q) {
    if(!utilities.initiatedProject()) {
      return console.log('You haven\'t initialized a project yet');
    }
    if(typeof q === 'undefined') {
      log.error('You need to provide a query in your search. E.g. gt search "some query"');
      return false;
    }
    cli.search(q);
  });

commands
  .command('log')
  .description('Show translation log')
  .action(function() {
    if(!utilities.initiatedProject()) {
      return console.log('You haven\'t initialized a project yet');
    }
    if(commands.values) {//no-values option
      cli.log(this.locale, 'regular');
    }
    else {
      cli.log(this.locale, 'empty-values');
    }
  });

commands
  .command('update')
  .description('Update translation keys from source')
  .action(function() {
    if(!utilities.initiatedProject()) {
      return console.log('You haven\'t initialized a project yet.');
    }
    cli.update();
  });

commands
  .command('compile')
  .description('Compile transations')
  .action(function() {
    if(!utilities.initiatedProject()) {
      return console.log('You haven\'t initialized a project yet.');
    }
    cli.compile();
  });

commands
  .command('set [reference] [value]')
  .description('Edit a translation')
  .action(function(reference, value) {
    if(!utilities.initiatedProject()) {
      return console.log('You haven\'t initialized a project yet.');
    }
    cli.edit(reference, value, this.locale);
  });

commands
  .command('configs')
  .description('Show configurations')
  .action(function() {
    if(!utilities.initiatedProject()) {
      return console.log('You haven\'t initialized a project yet.');
    }
    console.log(_.clone(project));
  });

if(process.argv.length >= 3 && ['init', 'interface', 'search', 'log', 'update', 'compile', 'set', 'configs'].indexOf(process.argv[2]) === -1) {
  process.argv[2] = '--help';
}

commands.parse(process.argv);

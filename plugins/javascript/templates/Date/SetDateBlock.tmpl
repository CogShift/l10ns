var date;
var dateString = '';
var year;
var month;
var date_;
var hours;
var minutes;
var seconds;
var milliseconds;
var toTimezoneOffset;
if(it.{{=it.variableName}} instanceof Date) {
  if(it.{{=it.variableName}} instanceof Date) {
    date = it.{{=it.variableName}};
  }
  else if(it.{{=it.variableName}}.time instanceof Date){
    date = new Date(it.{{=it.variableName}});
  }
  toTimeZoneOffset = date.getTimezoneOffset();
}
else {
  if(typeof it.{{=it.variableName}}.toTimezone === 'undefined') {
    throw new TypeError('You must define a \'toTimezone\' property for {{=it.variableName}}');
  }

  if(!(it.{{=it.variableName}}.toTimezone in timezones)) {
    throw new TypeError('Timezone \'' + it.{{=it.variableName}}.toTimezone + '\' is not defined. Please define it in your l10ns.json file.');
  }

  if(typeof it.{{=it.variableName}}.time === 'undefined') {
    throw new TypeError('You must define a time property for {{=it.variableName}}');
  }

  if(!(it.{{=it.variableName}}.time instanceof Date)) {
    throw new TypeError('Property time must be of type Date.');
  }

  date = new Date(it.{{=it.variableName}}.time.getTime());
  var currentMinutes = date.getMinutes();
  var currentTimezoneOffset = -(date.getTimezoneOffset());
  var timezoneInfo = timezones[it.{{=it.variableName}}.toTimezone];
  var unixTime = date.getTime();
  var index;
  if(unixTime > timezoneInfo.untils[timezoneInfo.untils.length - 1] || unixTime < timezoneInfo.untils[0]) {
    toTimezoneOffset = -1 * timezoneInfo.offsets.reduce(function (previous, current) {
      return (Math.abs(current - 0) < Math.abs(previous - 0) ? current : previous);
    });
  }
  else {
    for(var index = 0; index < timezoneInfo.untils.length; index++) {
      if(unixTime < timezoneInfo.untils[index]) {
        index = index - 1;
        break;
      }
    }
    toTimezoneOffset = -(timezoneInfo.offsets[index]);
  }
  date.setMinutes(currentMinutes + (toTimezoneOffset - currentTimezoneOffset));
}
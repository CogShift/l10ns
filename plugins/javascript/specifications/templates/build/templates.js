function encodeHTMLSource() {  var encodeHTMLRules = { "&": "&#38;", "<": "&#60;", ">": "&#62;", '"': '&#34;', "'": '&#39;', "/": '&#47;' },  matchHTML = /&(?!#?w+;)|<|>|"|'|\//g;  return function() {    return this ? this.replace(matchHTML, function(m) {return encodeHTMLRules[m] || m;}) : this;  };};
String.prototype.encodeHTML=encodeHTMLSource();
var tmpl = {};
  tmpl['JavascriptWrapper']=function anonymous(it) {
var out=';(function() {\n  function roundTo(number, to) {\n    return Math.round(number / to) * to;\n  }\n\n  function formatNumber(it) {\n    var number = it.number\n      , prefix = it.prefix\n      , suffix = it.suffix\n      , currencySymbol =\n        \'([\\\\u0024\\\\u00A2-\\\\u00A5\\\\u058F\\\\u060B\\\\u09F2\\\\u09F3\\\\u09FB\\\\u0AF1\\\\\\\n           \\\\u0BF9\\\\u0E3F\\\\u17DB\\\\u20A0-\\\\u20BD\\\\uA838\\\\uFDFC\\\\uFE69\\\\uFF04\\\\\\\n           \\\\uFFE0\\\\uFFE1\\\\uFFE5\\\\uFFE6])\'\n      , startsWithCurrencySymbolSyntax = new RegExp(\'^\' + currencySymbol)\n      , endsWithCurrencySymbolSyntax = new RegExp(currencySymbol + \'$\');\n\n    if(it.percentage) {\n      prefix = prefix.replace(\'%\', it.symbols.percent);\n      suffix = suffix.replace(\'%\', it.symbols.percent);\n      number = number * 100;\n    }\n    else if(it.permille) {\n      prefix = prefix.replace(\'‰\', it.symbols.permille);\n      suffix = suffix.replace(\'‰\', it.symbols.permille);\n      number = number * 1000;\n    }\n    number = roundTo(number, it.roundTo);\n\n    var numberSplit = (number + \'\').split(\'.\')\n      , integerDigits = numberSplit[0]\n      , integerDigitsLength = integerDigits.length\n      , fractionDigits = numberSplit[1] || \'\'\n      , fractionDigitsLength = fractionDigits.length;\n\n    if(integerDigitsLength < it.minimumIntegerDigits) {\n      var missingIntegerDigits = it.minimumIntegerDigits - integerDigitsLength;\n      for(var index = 0; index < missingIntegerDigits; index++) {\n        integerDigits = \'0\' + integerDigits;\n      }\n      integerDigitsLength = it.minimumIntegerDigits;\n    }\n    if(it.groupSize) {\n      var newIntegerDigits = \'\';\n      for(var index = integerDigitsLength - 1; index >= 0; index--) {\n        var primaryIndex = integerDigitsLength - it.groupSize.primary - 1;\n        if(index === primaryIndex) {\n          newIntegerDigits += it.symbols.group;\n        }\n        else if(index < primaryIndex && (primaryIndex - index) % it.groupSize.secondary === 0) {\n          newIntegerDigits += it.symbols.group;\n        }\n\n        newIntegerDigits += integerDigits.charAt(index);\n      }\n      integerDigits = newIntegerDigits.split(\'\').reverse().join(\'\');\n    }\n\n    if(fractionDigitsLength > it.maximumFractionDigits) {\n      fractionDigits = fractionDigits.substring(0, it.maximumFractionDigits);\n    }\n    else if(fractionDigitsLength < it.minimumFractionDigits) {\n      var missingFractionDigits = it.minimumFractionDigits - fractionDigitsLength;\n      for(var index = 0; index < missingFractionDigits; index++) {\n        fractionDigits += \'0\';\n      }\n    }\n\n    if(it.currency) {\n      if(!endsWithCurrencySymbolSyntax.test(it.currency.symbol)) {\n        prefix = prefix + \' \';\n      }\n      if(!startsWithCurrencySymbolSyntax.test(it.currency.symbol)) {\n        suffix = \' \' + suffix;\n      }\n      prefix = prefix.replace(/¤+/, it.currency.symbol);\n      suffix = suffix.replace(/¤+/, it.currency.symbol);\n    }\n\n    var result = \'\';\n    result += prefix;\n    result += integerDigits;\n    if(fractionDigits.length > 0) {\n      result += it.symbols.decimal + fractionDigits;\n    }\n    result += suffix;\n\n    return result;\n  }\n\n  var localizations = {\n    \'en-US\': {\n      \'__getPluralKeyword\': function(cardinal) {\n        var cardinal = cardinal + \'\'\n          , n = cardinal\n          , i = parseInt(cardinal, 10)\n          , v = 0\n          , w = 0\n          , f = 0\n          , t = 0;\n\n        var hasFractionalDigitsSyntax = /\\.(\\d+)/;\n\n        if(hasFractionalDigitsSyntax.test(cardinal)) {\n          f = fractionalDigits.exec(cardinal)[1];\n          v = f.length;\n        }\n        if(hasFractionalDigitsSyntax.test(cardinal)) {\n          t = cardinal.replace(/0+$/, \'\');\n          t = fractionalDigits.exec(t)[1];\n          w = t.length;\n        }\n        if(i === 1 && v === 0) {\n          return \'one\';\n        }\n        return \'other\';\n      },\n      \'__getOrdinalKeyword\': function(cardinal) {\n        var cardinal = cardinal + \'\'\n          , n = cardinal\n          , i = parseInt(cardinal, 10)\n          , v = 0\n          , w = 0\n          , f = 0\n          , t = 0;\n\n        var hasFractionalDigitsSyntax = /\\.(\\d+)/;\n\n        if(hasFractionalDigitsSyntax.test(cardinal)) {\n          f = fractionalDigits.exec(cardinal)[1];\n          v = f.length;\n        }\n        if(hasFractionalDigitsSyntax.test(cardinal)) {\n          t = cardinal.replace(/0+$/, \'\');\n          t = fractionalDigits.exec(t)[1];\n          w = t.length;\n        }\n        if(n % 10 === 1 && n % 100 !== 11) {\n          return \'one\';\n        }\n        else if(n % 10 === 2 && n % 100 !== 12) {\n          return \'two\';\n        }\n        else if(n % 10 === 3 && n % 100 !== 13) {\n          return \'few\';\n        }\n        return \'other\';\n      },\n      \'__numberSymbols\': {\n        \'decimal\': \'.\',\n        \'group\': \',\',\n        \'list\': \';\',\n        \'percentSign\': \'%\',\n        \'plusSign\': \'+\',\n        \'minusSign\': \'-\',\n        \'exponential\': \'E\',\n        \'superscriptingExponent\': \'×\',\n        \'perMille\': \'‰\',\n        \'infinity\': \'∞\',\n        \'nan\': \'NaN\'\n      },\n      \'key-1\': function(it) {\n'+(it.functionBody)+'\n      }\n    }\n  };\n\n  function requireLocale(locale) {\n    return (function(locale) {\n      return function l(key) {\n        if(!(locale in localizations)) {\n          return \'LOCALE_NOT_IN_LOCALIZATIONS: \' + locale;\n        }\n        if(!(key in localizations[locale])) {\n          return \'KEY_NOT_IN_LOCALIZATIONS: \' + key;\n        }\n        return localizations[locale][key].call(undefined, arguments[1]);\n      };\n    })(locale);\n  };\n\n  if(typeof require === "function" && typeof exports === \'object\' && typeof module === \'object\') {\n    module.exports = requireLocale;\n  }\n  else if (typeof define === "function" && define.amd) {\n    define(function() {\n      return requireLocale;\n    });\n  }\n  else {\n    window.requireLocale = requireLocale;\n  }\n})();\n';return out;
};
module.exports = tmpl;
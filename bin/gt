#!/usr/bin/env node

/**
 * Module dependencies
 */

var program = require('commander')
  , findup = require('findup-sync')
  , path = require('path')
  , open = require('open')
  , pjson = require('../package.json')
  , _ = require('underscore')
  , glob = require('glob')
  , gtPath = findup('gt.json')
  , root = path.dirname(gtPath)
  , cf = require(gtPath)
  , pcf = require('../conf/programConfigs')
  , log = require('../lib/_log');

/**
 * Add terminal colors
 */

require('terminal-colors');

/**
 * Set default configs
 */

var defaultConfigs = {
  folder : pcf.DEFAULT_FOLDER,
  requirejs : pcf.DEFAULT_REQUIREJS,
  translationFunction : pcf.DEFAULT_TRANSLATION_FUNCTION,
  src : pcf.DEFAULT_SRC,
  port : pcf.DEFAULT_PORT,
  autoOpen : pcf.DEFAULT_AUTO_OPEN,
  root : root
};
// Merge with programConfigs
defaultConfigs = _.extend(defaultConfigs, pcf);
cf = _.defaults(cf, defaultConfigs);

/**
 * Set short-cuts configs
 */

cf.localesFolder = path.join(cf.root, cf.folder, pcf.LOCALES_FOLDER);
cf.deleteLog = cf.folder + pcf.DELETE_LOG_FILE;
cf.latestSearchFile = cf.folder + pcf.LATEST_SEARCH_CACHE_FILE;
cf.programmingLanguage = cf.programmingLanguage || pcf.DEFAULT_PROGAMMING_LANGAUGE;
if(typeof cf.output === 'undefined') {
  cf.output = path.join(cf.folder, pcf.DEFAULT_OUTPUT);
}
else {
  cf.output = path.join(cf.root, cf.output);
}

lcf = require('../plugins/' + cf.programmingLanguage + '/parseConfigs');
if(typeof lcf.quiet === 'undefined') {
  lcf.quiet = pcf.DEFAULT_QUIET;
}

/**
 * Get all source files.
 */

var src = [], _files, add, removes;
for(var i = 0; i < cf.src.length; i++) {
  if(cf.src[i].substr(0, 1) !== '!') {
    adds = glob.sync(cf.src[i], { cwd: root });
    src = src.concat(adds);
  } else {
    removes = glob.sync(files[i].substr(1), { cwd: root });
    src = src.filter(function(file) {
      return removes.indexOf(file) === -1;
    });
  }
}
cf.src = src;

/**
 * Set cf as global.
 */

GLOBAL.cf = cf;
GLOBAL.pcf = pcf;
GLOBAL.lcf = lcf;

/**
 * Check minimum configs.
 */

if(typeof cf.defaultLocale === 'undefined') {
  console.error('You must define defaultLocale in gt.json');
  process.exit();
}
if(typeof cf.locales === 'locales') {
  console.error('You must define your locales in ' + cf.folder + '/locales.json');
  process.exit();
}

var gt = require('../lib');

program
  .version(pjson.version)
  .option('-l, --locale <locale>', 'specify locale', String, cf.defaultLocale)
  .option('-ls, --locales <locales>', 'specify locales', String, cf.defaultLocales)
  .option('-p, --port <port>', 'specify the port [\'' + cf.port + '\']', Number, cf.port)
  .option('-f, --folder <folder>', 'specify folder', String, cf.folder)
  .option('-o, --output <output>', 'specify output', String, cf.output)
  .option('-s, --source <source>', 'specify source', String, cf.src)
  .option('-dl, --default-locale <default-locale>', 'specify default locale', String, cf.defaultLocale)
  .option('-pl, --programming-languague <programming-languague>', 'specify programming languague', String, cf.programmingLanguague)


program
  .command('init')
  .description('Initialize a new GetTranslation project')
  .action(function() {
    gt.init();
  });

program
  .command('interface')
  .description('Starts the translation interface')
  .action(function() {
    var server = require('../app/server');
    server.server();
  });

program
  .command('search [q]')
  .description('Search translation keys and values')
  .action(function(q) {
    if(typeof q === 'undefined') {
      log.error('You need to provide a query in your search. E.g. gt search "some query"');
      return false;
    }
    gt.search(q);
  });

program
  .command('log')
  .description('Get the latest translations')
  .action(function() {
    gt.log(this.locale);
  });

program
  .command('update')
  .description('Update translation keys from source')
  .action(function() {
    gt.update();
  });

program
  .command('compile')
  .description('Compile transations')
  .action(function() {
    gt.compile();
  });

program
  .command('edit [ref] [value]')
  .description('Edit transations')
  .action(function(ref, value) {
    gt.edit(ref, value, this.locale);
  });

program.parse(process.argv);


